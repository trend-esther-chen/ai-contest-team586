# Runner's Laps Problem

You are given an array lapTime where lapTime[i] denotes the time taken by the ith runner to complete one lap.

Each runner can run multiple laps successively; that is, the next lap can start immediately after completing the current lap. Also, each runner operates independently; that is, the laps of one runner do not influence the laps of any other runner.

You are also given an integer totalLaps, which denotes the number of laps all runners should complete in total. Your task is to calculate and return the minimum time required for all runners to complete at least totalLaps laps.

Complete the following function:

```python3
def solution(lapTime: list[int], totalLaps: int) -> int:
    pass
```

**Constraints:**  
1 <= lapTime.length <= 10^5  
1 <= lapTime[i], totalLaps <= 10^7  

**Example 1**  
Input:

```python3
lapTime = [3, 5, 2]
totalLaps = 6
```

Output:

```python3
6
```

Explanation:  
At time t = 2, the number of laps completed by each runner are [0, 0, 1]. The total number of laps completed is 0 + 0 + 1 = 1.  
At time t = 3, the number of laps completed by each runner are [1, 0, 1]. The total number of laps completed is 1 + 0 + 1 = 2.  
At time t = 4, the number of laps completed by each runner are [1, 0, 2]. The total number of laps completed is 1 + 0 + 2 = 3.  
At time t = 5, the number of laps completed by each runner are [1, 1, 2]. The total number of laps completed is 1 + 1 + 2 = 4.  
At time t = 6, the number of laps completed by each runner are [2, 1, 3]. The total number of laps completed is 2 + 1 + 3 = 6.  
So the minimum time needed for all runners to complete at least 6 laps is 6.  

**Example 2**  
Input:  

```python3
lapTime = [4]
totalLaps = 3
```

Output:  

```python3
12
```

Explanation:  
There is only one runner, and they will complete their first lap at t = 4. Since the runner operates independently, they will complete the next two laps in the same time.  
So the minimum time needed to complete 3 laps is 12.
