### Problem Description

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [1, 0], ai=1, bi=0, indicates that to take course 1 you have to first take course 0.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.
If there are multiple possible solution because courses have same prerequisites, sort these courses in ascending order.

You need to implement the following function:

```python3
def solution(numCourses: int, prerequisites: list[list[int, int]]) -> list[int]:
    ...
    pass
```

### Constraints

- $1 <= numCourses <= 2000$
- $0 <= prerequisites.length <= 5000$
- $prerequisites[i].length == 2$
- $0 <= a_i, b_i < numCourses$
- All the pairs $prerequisites[i]$ are unique

### Input Example 1

```
numCourses = 2, prerequisites = [[1,0]]
```

### Output Example 1

```
[0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
```

### Input Example 2

```
numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
```

### Output Example 2

```
[0,1,2,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken 
```

### Input Example 3

```
numCourses = 1, prerequisites = []
```

### Output Example 3

```
[0]
```
